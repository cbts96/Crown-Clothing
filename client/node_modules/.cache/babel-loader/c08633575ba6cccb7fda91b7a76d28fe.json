{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport actionTypes from \"../User/actionTypes\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from \"./userAction\";\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from \"../../Firebase/FirebaseUtil\";\nexport function* getSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshot(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {} catch (error) {\n    yield signOu;\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(actionTypes.GOOGLESIGNINSTART, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(actionTypes.EMAILSIGNINSTART, signInWithEmail);\n}\nexport function* onCheckUserLogin() {\n  yield takeLatest(actionTypes.CHECKUSERSEESION, isUserAuthenticated);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserLogin)]);\n}","map":{"version":3,"sources":["D:/Reactjs 2/crown-clothing-v3/src/Redux/User/userSaga.js"],"names":["put","takeLatest","all","call","actionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","auth","createUserProfileDocument","googleProvider","getCurrentUser","getSnapshot","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signOu","onGoogleSignInStart","GOOGLESIGNINSTART","onEmailSignInStart","EMAILSIGNINSTART","onCheckUserLogin","CHECKUSERSEESION","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAsDC,cAAtD,QAA4E,cAA5E;AACA,SACEC,IADF,EAEEC,yBAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,6BALP;AAOA,OAAO,UAAUC,WAAV,CAAsBC,QAAtB,EAAgC;AACrC,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,IAAI,CAACO,yBAAD,EAA4BI,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAACK,aAAa,CAAC;AAAEa,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACM,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBZ,cAArB,CAAvB;AACA,UAAME,WAAW,CAACS,IAAD,CAAjB;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACM,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF;AACD,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAT,CAA1B,EAAuD;AAC5D,MAAI;AACF,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,WAAW,CAACS,IAAD,CAAjB;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACM,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUS,mBAAV,GAA+B;AACpC,MAAG;AACD,UAAMf,QAAQ,GAAC,MAAMF,cAAc,EAAnC;AACA,QAAG,CAACE,QAAJ,EAAc;AACd,UAAMD,WAAW,CAACC,QAAD,CAAjB;AACD,GAJD,CAIC,OAAMM,KAAN,EAAY;AACX,UAAMpB,GAAG,CAACM,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAWU,OAAX,GAAoB;AACzB,MAAG,CAEF,CAFD,CAEC,OAAMV,KAAN,EAAY;AACX,UAAMW,MAAN;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAM/B,UAAU,CAACG,WAAW,CAAC6B,iBAAb,EAAgCZ,gBAAhC,CAAhB;AACD;AACD,OAAO,UAAUa,kBAAV,GAA+B;AACpC,QAAMjC,UAAU,CAACG,WAAW,CAAC+B,gBAAb,EAA+BX,eAA/B,CAAhB;AACD;AAED,OAAO,UAAWY,gBAAX,GAA6B;AAClC,QAAMnC,UAAU,CAACG,WAAW,CAACiC,gBAAb,EAA8BR,mBAA9B,CAAhB;AACD;AAED,OAAO,UAAUS,QAAV,GAAqB;AAC1B,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC6B,mBAAD,CAAL,EAA2B7B,IAAI,CAAC+B,kBAAD,CAA/B,EAAoD/B,IAAI,CAACiC,gBAAD,CAAxD,CAAD,CAAT;AACD","sourcesContent":["import { put, takeLatest, all, call } from \"redux-saga/effects\";\r\nimport actionTypes from \"../User/actionTypes\";\r\nimport { signInSuccess, signInFailure, signOutSuccess,signOutFailure } from \"./userAction\";\r\nimport {\r\n  auth,\r\n  createUserProfileDocument,\r\n  googleProvider,\r\n  getCurrentUser\r\n} from \"../../Firebase/FirebaseUtil\";\r\n\r\nexport function* getSnapshot(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshot(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signInWithEmail({payload:{email, password}}) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshot(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n  try{\r\n    const userAuth=yield getCurrentUser();\r\n    if(!userAuth) return;\r\n    yield getSnapshot(userAuth);\r\n  }catch(error){\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function * signOut(){\r\n  try{\r\n\r\n  }catch(error){\r\n    yield signOu\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(actionTypes.GOOGLESIGNINSTART, signInWithGoogle);\r\n}\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(actionTypes.EMAILSIGNINSTART, signInWithEmail);\r\n}\r\n\r\nexport function * onCheckUserLogin(){\r\n  yield takeLatest(actionTypes.CHECKUSERSEESION,isUserAuthenticated)\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}