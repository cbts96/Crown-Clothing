{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport { actionsTypes } from \"../Shop/actionTypes\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"i am fired\");\n  const collectionRef = firestore.collection(\"collections\");\n  dispatch(FetchCollectionStart());\n  collectionRef.get().then(snapshot => {\n    const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    dispatch(FetchCollectionSuccess(collectionMap));\n  }).catch(error => dispatch(FetchCollectionFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(actionsTypes.FETCHCOLLECTIONSSTARTS, fetchCollectionAsync);\n}","map":{"version":3,"sources":["D:/Reactjs 2/crown-clothing-v3/src/Redux/Shop/shopSaga.js"],"names":["takeEvery","actionsTypes","fetchCollectionAsync","console","log","collectionRef","firestore","collection","dispatch","FetchCollectionStart","get","then","snapshot","collectionMap","convertCollectionSnapshotToMap","FetchCollectionSuccess","catch","error","FetchCollectionFailure","message","fetchCollectionStart","FETCHCOLLECTIONSSTARTS"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAUC,YAAV,QAA8B,qBAA9B;AAGA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR;AAEAJ,EAAAA,aAAa,CACVK,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,aAAa,GAAGC,8BAA8B,CAACF,QAAD,CAApD;AACAJ,IAAAA,QAAQ,CAACO,sBAAsB,CAACF,aAAD,CAAvB,CAAR;AACD,GALH,EAMGG,KANH,CAMUC,KAAD,IAAWT,QAAQ,CAACU,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAN5B;AAOH;AACD,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMpB,SAAS,CAACC,YAAY,CAACoB,sBAAd,EAAqCnB,oBAArC,CAAf;AACH","sourcesContent":["import {takeEvery} from \"redux-saga/effects\";\r\nimport  { actionsTypes } from \"../Shop/actionTypes\";\r\n\r\n\r\nexport function* fetchCollectionAsync(){\r\n    yield console.log(\"i am fired\");\r\n\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    dispatch(FetchCollectionStart());\r\n\r\n    collectionRef\r\n      .get()\r\n      .then((snapshot) => {\r\n        const collectionMap = convertCollectionSnapshotToMap(snapshot);\r\n        dispatch(FetchCollectionSuccess(collectionMap));\r\n      })\r\n      .catch((error) => dispatch(FetchCollectionFailure(error.message)));\r\n}\r\nexport function* fetchCollectionStart(){\r\n    yield takeEvery(actionsTypes.FETCHCOLLECTIONSSTARTS,fetchCollectionAsync)\r\n}"]},"metadata":{},"sourceType":"module"}