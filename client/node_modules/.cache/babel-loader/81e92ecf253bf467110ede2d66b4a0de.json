{"ast":null,"code":"import { takeEvery, call, put, takeLatest } from \"redux-saga/effects\";\nimport { actionsTypes } from \"../Shop/actionTypes\";\nimport { firestore, convertCollectionSnapshotToMap } from \"../../Firebase/FirebaseUtil\";\nimport { FetchCollectionSuccess, FetchCollectionFailure } from \"./shopAction\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"i am fired\");\n\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(FetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(FetchCollectionFailure(error.message));\n  } // collectionRef\n  //   .get()\n  //   .then((snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     dispatch(FetchCollectionSuccess(collectionMap));\n  //   })\n  //   .catch((error) => dispatch(FetchCollectionFailure(error.message)));\n\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(actionsTypes.FETCHCOLLECTIONSSTARTS, fetchCollectionAsync);\n}","map":{"version":3,"sources":["D:/Reactjs 2/crown-clothing-v3/src/Redux/Shop/shopSaga.js"],"names":["takeEvery","call","put","takeLatest","actionsTypes","firestore","convertCollectionSnapshotToMap","FetchCollectionSuccess","FetchCollectionFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCHCOLLECTIONSSTARTS"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA8BC,UAA9B,QAAgD,oBAAhD;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,6BAHP;AAIA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,cAA/D;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACK,8BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMZ,GAAG,CAACK,sBAAsB,CAACS,cAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAACM,sBAAsB,CAACS,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD,GAVqC,CAYtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACD,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMhB,UAAU,CAACC,YAAY,CAACgB,sBAAd,EAAsCX,oBAAtC,CAAhB;AACD","sourcesContent":["import { takeEvery, call, put,takeLatest } from \"redux-saga/effects\";\r\nimport { actionsTypes } from \"../Shop/actionTypes\";\r\nimport {\r\n  firestore,\r\n  convertCollectionSnapshotToMap,\r\n} from \"../../Firebase/FirebaseUtil\";\r\nimport { FetchCollectionSuccess, FetchCollectionFailure } from \"./shopAction\";\r\n\r\nexport function* fetchCollectionAsync() {\r\n  yield console.log(\"i am fired\");\r\n\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\r\n    yield put(FetchCollectionSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(FetchCollectionFailure(error.message));\r\n  }\r\n\r\n  // collectionRef\r\n  //   .get()\r\n  //   .then((snapshot) => {\r\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\r\n  //     dispatch(FetchCollectionSuccess(collectionMap));\r\n  //   })\r\n  //   .catch((error) => dispatch(FetchCollectionFailure(error.message)));\r\n}\r\nexport function* fetchCollectionStart() {\r\n  yield takeLatest(actionsTypes.FETCHCOLLECTIONSSTARTS, fetchCollectionAsync);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}